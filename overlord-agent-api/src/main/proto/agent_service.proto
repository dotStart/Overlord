syntax = "proto3";
package agent_api;
option java_package = "tv.dotstart.overlord.agent.api";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service Agent {

  /**
   * Retrieves the current state of the agent at the time of invocation.
   *
   * This endpoint is primarily meant for recovery purposes (e.g. when the supervisor has somehow
   * been restarted in the meantime and re-acquires the state of an agent instance). As such, it
   * effectively provides an aggregated version of the provision and state update calls.
   */
  rpc getStatus (google.protobuf.Empty) returns (AgentState);

  /**
   * Subscribes to a stream of server state updates.
   *
   * Each message within the resulting stream contains basic information on the server such as
   * whether a process remains alive or a single log message.
   *
   * For more information refer to [StateUpdate].
   *
   * The agent will immediately start to broadcast events to the client until the input stream is
   * completed by the client.
   */
  rpc subscribe (stream google.protobuf.Empty) returns (stream StateUpdate);

  /**
   * Provisions an agent instance with a server plugin and configuration.
   *
   * Once this RPC succeeds, the agent will be "locked" to a given server instance and remain in
   * this state until its process is restarted.
   *
   * As such, agent instances cannot be re-used for different server instances. The supervisor
   * implementation is expected to completely remove an agent and spawn a new process if a different
   * server instance shall be started in its place.
   */
  rpc provision (ProvisionRequest) returns (ProvisionResponse);

  /**
   * Adjusts the configuration of a provisioned server plugin.
   *
   * Note that this endpoint does not typically cause the server to reload its configuration. To
   * update the configuration values, [reload] must be invoked (or the server restarted if [reload]
   * is not supported).
   */
  rpc reconfigure (ConfigurationMap) returns (google.protobuf.Empty);

  /**
   * Causes a provisioned server instance to be started.
   *
   * This endpoint is also available if a server instance has been stopped or killed prior to this
   * RPC.
   */
  rpc start (google.protobuf.Empty) returns (google.protobuf.Empty);

  /**
   * Requests a graceful server shutdown.
   *
   * This request will block until the server instance has either gracefully shut down (e.g. its
   * process has exited) or the given timeout has been exceeded (in which case the agent will
   * respond with an error code indicating such failure).
   */
  rpc stop (StopRequest) returns (google.protobuf.Empty);

  /**
   * Requests a forceful server shutdown.
   *
   * Warning: This RPC may cause loss of data or save data corruption and should only ever be
   * invoked as a last resort in order to shut down the agent in a sensible way.
   */
  rpc kill (google.protobuf.Empty) returns (google.protobuf.Empty);

  /**
   * Executes a server command.
   *
   * Note: This endpoint is not supported by all server plugins. Refer to the respective server
   * plugin documentation for more information.
   */
  rpc executeCommand (google.protobuf.StringValue) returns (google.protobuf.Empty);

  /**
   * Sends a server-wide announcement to all players.
   *
   * Note: This endpoint is not supported by all server plugins. Refer to the respective server
   * plugin documentation for more information.
   */
  rpc announce (google.protobuf.StringValue) returns (google.protobuf.Empty);

  /**
   * Reloads the server configuration from disk.
   *
   * Note: This endpoint is not supported by all server plugins. Refers to the respective server
   * plugin documentation for more information.
   */
  rpc reload (google.protobuf.Empty) returns (google.protobuf.Empty);
}

message AgentState {

  /**
   * Identifies whether the agent has been provisioned with a plugin and server configuration.
   */
  bool provisioned = 1;

  /**
   * Identifies whether the agent is currently running a server instance that has previously been
   * provisioned.
   */
  bool alive = 2;

  /**
   * Identifies the URI of the plugin which was loaded upon agent provisioning (if any).
   *
   * This value will remain unset if a plugin blob is transmitted upon provisioning as the agent is
   * not aware of the plugin source.
   */
  string plugin_uri = 3;

  /**
   * Identifies the display name of the plugin which is being executed on the agent.
   */
  string plugin_display_name = 4;

  /**
   * Identifies the version number of the plugin which is being executed on the agent.
   */
  string plugin_version = 5;

  /**
   * Identifies a listing of capabilities provided by the server plugin implementation.
   */
  repeated ServerInstanceCapability capabilities = 6;
}

message StateUpdate {
  oneof update {

    /**
     * Identifies whether the server has entered a started or shut down state (e.g. whether its
     * process is alive or not).
     *
     * Note: This flag does not provide a health check and is thus unaware of the reachability of
     * the server upon completion.
     */
    bool alive = 1;

    /**
     * Provides a log message which has been written to stdout or stderr by the server instance.
     */
    string log_message = 2;
  }
}

message ProvisionRequest {

  /**
   * Defines the plugin which maintains the desired server instance for the duration of the agent
   * lifetime.
   */
  oneof plugin {

    /**
     * Defines a standard Overlord plugin URI from which the server plugin shall be fetched
     * autonomously.
     *
     * Note: The set of available repository plugins depends on the agent Class-Path and startup
     * parameters. Great care should be taken when using this parameter as the supervising
     * implementation does not have control over the plugin installation process. As such, using
     * the [pluginBlob] parameter is preferred.
     */
    string plugin_uri = 1;

    /**
     * Defines a full plugin blob which contains an Overlord plugin jar.
     *
     * This parameter circumvents the built-in plugin repository logic and instead places a plugin
     * jar within the machine's temporary storage for the duration of the agent lifetime.
     */
    bytes plugin_blob = 2;
  }

  /**
   * Provides various parameters which will be passed directly to the server plugin instance.
   *
   * Note: These values will be converted directly to their respective JVM counter parts and must
   * match the plugin implementation exactly (otherwise mapping may fail as implicit conversion is
   * not yet supported).
   */
  ConfigurationMap plugin_configuration = 3;
}

message ProvisionResponse {

  /**
   * Echoes back the plugin URI of a previous ProvisionRequest.
   */
  string plugin_uri = 1;

  /**
   * Identifies the display name of the plugin which is being executed on the agent.
   */
  string plugin_display_name = 2;

  /**
   * Identifies the version number of the plugin which is being executed on the agent.
   */
  string plugin_version = 3;

  /**
   * Identifies the capabilities provided by the server plugin implementation.
   */
  repeated ServerInstanceCapability capabilities = 4;
}

message StopRequest {

  /**
   * Specifies the maximum amount of time (in milliseconds) that a server may take to shut down
   * before the call is marked failed.
   *
   * Note: This value on its own will only adjust the timeout for the RPC itself. As such, callers
   * are expected to invoke the kill endpoint when appropriate.
   */
  uint64 timeout = 1;
}

enum ServerInstanceCapability {
  ANNOUNCEMENTS = 0;
  COMMAND_EXECUTION = 1;
  CONFIGURATION_RELOAD = 2;
}

message ConfigurationMap {
  repeated ConfigurationValue pairs = 1;
}

message ConfigurationValue {
  string key = 1;

  oneof value {
    double double_value = 10;
    float float_value = 11;
    int32 int_value = 12;
    int64 long_value = 13;
    bool boolean_value = 14;
    string string_value = 15;
    bytes byte_array_value = 16;

    ConfigurationMap map_value = 30;
  }
}
